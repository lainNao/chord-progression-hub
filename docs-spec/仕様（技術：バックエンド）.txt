■目次
  ＜技術選定＞
    言語やランタイム選定  //spec-20240204123934
    サーバー選定      //spec-20240203182119
    ORM選定          //spec-20240203144028
    メール本文作成     ////spec-20240203190118
  ＜TODO＞
    i18nライブラリ
    メール送信サービス

■詳細
  ＜言語やランタイム選定＞
    ■決定
      Node.jsの最新
    ■メモ
      ・Node.jsとどっちにするかですごい迷って、、、以下のように最初考えていた
          1.Node.jsが安牌。Bunだとnpmにあるパッケージが偶に動かなかったりするはず
          2.Bunにするには実行速度を求めるはずだけど、「変に詰まって開発速度落ちる」的なやつのほうが気になる
          3.Bunの将来性が怪しい気がする。やっぱりNode.jsが生き残っていく気がする
      ・でもなんかもうこのPJってお試し半分だし、料金安くすることに結構メリットあるので、Bunやってみるか
      ・とやっぱりなったけど「Bun prisma」で検索したら対応してないとかどうとか出て、ああやっぱりNode.jsでとなりました
          https://zenn.dev/o_ga/articles/5e10ac057ed616
  ＜メール送信サービス＞
    ■決定
      Amazon SES
    ■メモ
      ・理由は安いから
        https://www.courier.com/integrations/compare/amazon-ses-vs-sendgrid/
      ・AWSとGCPどっちも使うのは怠そうだけど明らかに安いので仕方ない
        ・それならそもそもコンテナ動かすのもGCPでなくAWSでやっちゃえばよいのではないかな…？
  ＜i18nライブラリ＞
    Next.jsなら参考になりそうなツイート https://twitter.com/d151005/status/1727190995299881006
      ■以下引用
      Next.js (App) における国際化対応は next-international がおすすめ。
      ◆ 型対応
      ◆ 複数形、テンプレート対応
      ◆ RSC対応
      ◆ 軽量
      公式のガイドはハンドメイドすぎて実用性低く、next-intl などは並列ルートや代替ルートの組み合わせで不具合が多く採用を断念しました。

  ＜メール本文作成＞
    ■決定
      react-email
    ■メモ
      ・使ってみて不要そうなら辞める
      ・一旦使ってみる
  ＜サーバー選定＞
    ■決定
      Next.js
    ■調査メモ
      ＜比較＞
        ■Next.js
          ・独自キャッシュがいらなかった感ある
            ・と思ったけど、コード進行詳細ページはキャッシュしたい。CloudFrontでやると逆に余計なキャッシュがついてきて面倒な感じがする。
              ・フルルートキャッシュ　https://nextjs.org/docs/app/building-your-application/caching#full-route-cache
            ・いや、CloudFrontでやっちゃえばいいかな…結局そういうの使わないとDDoS対策が厳しそうなので
              ・Vercel使うならDDoS対策やってくれるからNext.jsのフルルートキャッシュも使っといてよさそうだけど、AWS/GCPならばDDoS対策のためにいずれにせよCloudFrontなりなんなりのCDNを使うので、結局Next.jsのフルルートキャッシュは余計になりそう
                ・Vercel使うと何より高いっぽいのがネック…
          ・next/imageとかも使わない
            ・そういうの使うならVercelがいいけど、Vercel高いので使いたくない
              ・と思ったけど、別にnext/image使わなければいいだけ。
          ・後、今回はシンプルなアプリケーションなので、そんな高機能でなくていい
            ・と思ったけど、キャッシュ機構はCloudFront使うのがなんか面倒なのでNext.jsにするか…
              ・あと、Remixと機能的に大差無いし、Next.jsのほうがユーザーが100倍くらいは多く、さすがに無視できない
            ・いや、面倒だとかいう理由でやってはいけない…
        ■Remix
          ＜最初は＞
            ・Cloudflare使うならRemixが良さそう、と思って最初Remixにしていた。
              ・注意点としてworkersは1MBのリミットがあるっぽいのであまりバンドルサイズの大きいライブラリを使ってはいけない（間に合うのかな、）
              ・有料なら10MB
              ・小さくするのはCIとしてもコスパいいので、やってみたくはある
          ＜なんだかんだ＞
            ・Remixの使い勝手良さそうなのと、Next.jsのキャッシュ機構が邪魔感あるので、Remixにするか…
            ・メモリ消費量も少ないなどもあるし、、
            ・実際には「もはやどっちでもできるし」でRemixにしておく
          ＜と思ったけど＞
            ・ユーザー数が圧倒的に違うのと、RemixはまだRSCに対応してないっぽく、Next.jsと似た感じにどうせなりそう、、、というわけでNext.jsにしてしまう
        ■Qwik city
          ・安さを追求するならこういうパフォーマンスを意識したやつでもありではあるのかも知らんけど
  ＜ORM選定＞
    ■決定
      prisma
    ■メモ
      ＜検討1＞
        ・まず、全部まともに触りきらないと選定はできないと思う
        ・全部触り切っていないうちは、もはや勘で選定するしかない
        ・で、勘のレベルではまずprismaが一番いいと思う
          ■Drizzle
          ・公式HPでの「Developers love Drizzle ORM」という項目が寒い気がする（「I hate Drizzle」「Prisma is amazing」「Y'all should just copy everything Eloquent has」「Django had it in 2008」「I hate @DrizzleOrm so much that I wrote the Auth.js adapter for it.」とか書かれている。これはネタ？使わないほうがいいということ？「i know this won't get me on the homepage, but@DrizzleORM is so good」とあるのは養護っぽいけどうーん）
          ■kysely
          ・なんかprismaとdrizzleの間にいるイメージが勝手にある
          ■prisma
          ・資金調達とかもしており規模が他のと比べ物にならないほどでかい、のかな？もしそうならあれこれ言われている箇所があろうがたぶん一番変な箇所が詰まるとかが無くて妥当だと思う
        ・ただこのプロジェクト固有の要件としてtsvectorを使いたいというのがある
          ■prisma
          https://github.com/prisma/prisma/issues/5027
          ・未対応っぽい、茨の道になるのかも
          ・でもtsvector触るところだけ生クエリとかに隠蔽すればいいっちゃいいのかな
          ・隠蔽してrepositoryから返すのはORMに依存しない型にすればいいのかな
            ・あまり層を分け散らかしたくない思いがあるんだけどまあいいか… 
      ＜検討2＞
        ・tsvectorがprisma対応できてないので、面倒。生成される型が嘘つきになる可能性がある問題
        ・あれ、でも対応している？
          https://www.prisma.io/docs/orm/prisma-client/queries/full-text-search
        ・なんか未解決のissue見たんだけどURL見失った。でも↑のURL見つかったからもうそれはそれでいいかな、？一旦やってみよう…
          ・もし嘘つきになるなら以下の案
            1.面倒なので、別パッケージにしてしまう案
              ・そうすればメインはPlanetScale、コード進行検索はNeonにするという案もある
                ・そうすれば無料枠も増えるので料金的にも効果あるかもね
              ・別にNeonだけにして、prismaのschemaに書かなければいいという話でもあるけども
            2.prismaを辞めて、クエリビルダ的なやつにしちゃう
              ・そうすればNeonだけでいけるようになるはずで、二重管理しなくていい
            3.モデルの一部嘘があってもスルーする
              ・はい。コメントだけ書いておく等…
                →これが妥当な気がするよ…
            4.DBにアクセスするサーバーを別に立ててprismaじゃないのにする
              ・大変
              ・いろんな技術を試せて楽しいはわかるけど、楽しいだけでこれやるのは今回においてはかなりバッドなはず
