■目次
  ＜一般＞
    インフラ構成                //spec-20240205013412
    開発環境と本番環境の分け方    //spec-20240205013734
  ＜開発時＞
    開発環境ではクラウドリソースを実際にはあまり使わずモックを有効活用      //spec-20240203015201
  ＜IaC＞
    インフラ変更操作の流れは`packages-main/infra`配下に記載していく      //spec-20240127160924
      TODO: これ辞めたほうがいいかも。こっちに書いたほうが良さそう。インフラのディレクトリ構成をこうした理由とか結局失われてるわ
  ＜GitHub管理＞
    あれこれの設定ファイルを置いておく      //spec-20231221034913

■詳細
  ＜開発環境と本番環境の分け方＞
    ■決定
      ＜AWS organizationsで本番とステージング用のアカウントを用意することで分離する＞
        ・もしECRにあるイメージを共通利用したい等あれば、それもまた別アカウントにする
        ・terraform的にはそれらアカウントごとに別ディレクトリで管理する
        ・本番とステージングは基本的に同じリソース
          ・ただしステージングはIP制限したり少し工夫する
      ＜デプロイと停止のタイミング＞
        ・デプロイ　・・・本番はproductionブランチに、ステージングはstagingブランチにマージされたら自動でデプロイされる
        ・停止　・・・本番はAWS管理画面からポチポチでいいと思う。ステージングは気軽にterraformのコマンドで停止（というか削除）できるようにしたい。
  ＜インフラ構成＞
    ■決定
      ＜AWS周り＞
        ・AWS Organizations ・・・複数アカウント
        ・IAM ・・・権限管理
        ・AWS Shield Standard ・・・DDoS対策
        ・CloudFront ・・・キャッシュ
        ・S3 ・・・ロゴ画像とか（画像にしなくていいか…？）
        ・Route53 ・・・ドメイン
        ・VPC ・・・明示的なネットワーク設定（セキュリティの意図もあるとして）
        ・ALB ・・・ロードバランサー（一応）
        ・ECS(fargateモード), ECR ・・・コンテナ実行環境。Grunge Stackでやってるようにlambda+API Gatewayのようにしないのは、変にlambdaの環境の制限をあれこれ受けたくないから＆別にECSそんなに高くないだろとなんとなく考えてるから
        ・SES ・・・メール
        ・CloudWatch ・・・ログ
        ・CloudWatch Alarms ・・・監視
        ・AWS Batch ・・・バッチ処理（あれば）
      ＜その他＞
        ・Upstash ・・・セッション管理
        ・Neon ・・・メインDB
    ■メモ
      ・最初はわりと一般的なCloudRunにしようと思っていたけど、SES使うなら「GCPとAWS使うのだるいな」となり、AWSに基本的に統一することにした
        ・ちなみにSendGridが結構高いっぽくて、SESは結構安いっぽい。これが結構違った
          ・ちなみにCloudRunの方向で最初結構固めていたのでTerraformもゴリゴリ書いちゃっていたけど、書き換えることになる
      ・DB周りはAWSよりGCPのほうが安いイメージあったけど、そもそもDBは料金がより安い外部のを使いたいので、そこは大丈夫そうだった
  ＜インフラ変更操作の流れは`packages-main/infra`配下に記載していく＞
    ・開発進めていって新しいインフラが必要になったらその都度追記でいい、と思う。
      ・動作確認のコードも同時に書いていくケースが結構あると思うので
  ＜あれこれの設定ファイルを置いておく＞
    https://zenn.dev/morinokami/articles/dot-github-directory#%E3%81%9D%E3%81%AE%E4%BB%96
  ＜開発環境ではクラウドリソースを実際にはあまり使わずモックを有効活用＞ 
    ・そうすることで自動テストもしやすいはず
    ・例えばDBはNeonを使うが、開発環境ではdockerでPostgreSQLサーバを立てて使いたい
