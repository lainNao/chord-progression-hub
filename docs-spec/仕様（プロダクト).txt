■目次
  ＜一般＞
    ユーザー区分    //spec-20240203175342
  ＜サブ＞
  ＜機能単位＞
    ■一般
      .well-known周りの充実 //spec-20231221003320
      認証認可       //spec-20240203175315
      OGP機能       //spec-20240203175735
      HOME画面に追加 //spec-20231221003158
      もし広告用にクッキー使うなら、クッキー使いますよバナー  //spec-20231221003900
      ミューテーション類はリクエストとし、上の権限の人の承認が必要    //spec-20240208134107
      支払い周りの機能     //spec-20240224221620
    ■他
      ユーザー系機能       //spec-20240203173706
      コード進行機能       //spec-20240203173523
      記事機能            //spec-20240203173304
      リスト機能          //spec-20240203173354
      機能リクエスト       //spec-20240203175239
      コード進行リクエスト  //spec-20240203175421
  ＜ページ単位＞
    ■全般
      TOPページ
    ■コード進行系
      コード進行検索結果ページ
      コード進行詳細ページ
      コード進行当てチャレンジページ
    ■サブ
      FAQページ
      aboutページ
    ■ユーザー系
      マイページ      //spec-20240203174647
      ユーザーページ   //spec-20240203175517
      変更/削除リクエストページ  //spec-20240208135134
  ＜捨てた仕様＞
    好きなコード進行を登録し、それと類似するコード進行が投稿されたら通知する機能の登録できる（RSS）
  ＜UI単位＞
    有料プランのページで言い訳のため「サーバー代」「破綻」とかで検索したツイッターへのリンクを書いておく

■詳細
  ＜支払い周りの機能＞
    ■サブスク
      ・トライアル期間の設置      // 1週間
      ・決済情報の登録、変更      // クレジットカード
      ・決済の履行
        ・プランの変更
      ・決済できない場合のプラン強制変更
      ・領収書の送付
      ・決済履歴の表示
      ・解約
      ・返金                    // サポートから問い合わせてもらえれば30日以内ならOKとするかな。
    ■実装の流れ
      ＜管理画面で色々設定＞
        ・サブスク用商品の作成
        ・サブスクプランの作成
      ＜DBでのあれこれ＞
        usersテーブルに以下カラムを追加（または別テーブルにuserIdをキーに切り出す）
          stripe_customer_id
          stripe_subscription_id
          stripe_subscription_status
      ＜プログラムでのあれこれ＞
        ■サブスク開始のwebhook
          const stripeCustomer = await stripe.customers.create({...})
          Stripe::Subscription.create(
              customer: stripeCustomer.id,
              items: [{
                  plan: YOUR_PLAN_ID,
              }],
          )
          user.update({stripe_customer_id: stripeCustomer.id})
        ■サブスク変更のwebhook
          case event.type
          when 'customer.subscription.updated', 'customer.subscription.deleted'
            subscription = event.data.object
            user = User.find_by(stripe_customer_id: subscription.customer)
            user.update(
              stripe_subscription_status: subscription.status,
            )
          end
          // 取りうるステータスは以下
          // trialing: トライアル中
          // active: 課金中
          // past_due: 支払い期限超過
          // unpaid: 未払い
          // canceled: 定額課金のキャンセル



  ＜変更/削除リクエストページ＞
    ・一覧ページだけで、詳細ページは無し
      ・差分を簡単に見れるようにする
    
  ＜ミューテーション類はリクエストとし、上の権限の人の承認が必要＞
    ■背景
      ・色んな人が共有リソースをCRUDしていくアプリケーションになりそう
      ・その場合、好き勝手にCRUDできると一人の荒らしが全データをめちゃくちゃにして回る等ありそう
    ■対策
      ・コード進行の編集は「投稿者」または「サイト管理人」の承認が必要
      ・コード進行削除はそもそも投稿者にしかできず、承認は「サイト管理人」が行う

      ・なお、削除/編集リクエストにはコメントをつけられるようにする
  ＜もし広告用にクッキー使うなら、クッキー使いますよバナー＞
    はい
  ＜OGP機能＞
    はい
    コード進行ごとにいちいち画像作らなくていいけど「コード進行詳細ページ」と「ユーザーページ」ではOGP分けたいかも？
  ＜HOME画面に追加＞
    こういうやつ　
      https://qiita.com/ryoko_yamazaki/items/f34d904d640fa6304fe0
  ＜well-known周りの充実＞
    ・security.txtとか

  ＜ユーザーページ＞
    ■コントリビューショングラフ
    ・GitHub等のように、コントリビューションしたら他人から見れるようにする
  ＜コード進行リクエスト＞

    ・有料or無料での分析orコード進行投稿or公式記事orサイト機能のリクエストをする機能
    ・リクエストのCRUD
      ・回答
        ・お礼
    ・「これを満たせばOKですよ」という条件を明記させる。例えば「7thレベルまでは網羅」「イントロからアウトロまで省略しない」とか。 //spec-20231221010918

  ＜認証認可＞
    ・ログインは「Googleログイン」と「メールアドレス＋パスワード」の2種類を用意したい。 //spec-20231221012254
    ・できればパスキーログインも  //spec-20231221012256
  ＜機能リクエスト＞
    ・AST上足りないコード表現とかはユーザーからのリクエストを受けて増やすなどする(spec-20231221012340)
      ・ただ、検索システム上受け付けない表現はある。例えば「7(13)」のような表現は13に統一している。これは検索システムの都合上諦めている部分。ただよい代案があれば対応したい。
    ・普通に機能のリクエストとかも受ける
  ＜TOPページ＞
    ・GitHubのトップページ結構かっこいい <https://github.com/>
    ・左上あたりかヘッダーのどこかあたりに登録ボタンを置く
  ＜FAQページ＞
    ・余裕がある時に著作権周りのFAQを用意。<https://support.chordify.net/hc/en-us/articles/360001420738-Does-this-not-infringe-copyright->が参考になる
  ＜コード進行検索結果ページ＞
    ・GitHubのように、タイトルとコード詳細の関連部分の表示を1曲ごとに行う
  ＜コード進行詳細ページ＞
    ■メイン
      ・[ ] コード進行詳細表示(spec-20240110032402)
      ・[ ] 編集機能(spec-20240110032442)
        ・[ ] 自分が編集してる時に他人が編集したら、うまくマージする（楽観的ロック、またはpatch、または差分更新的な）(spec-20240110032718)
        ・[ ] 編集履歴差分表示機能(spec-20240110032750)
        ・[ ] raw textで編集する機能（リアルタイムバリデーションも行いたい）(spec-20240110032758)
          ・[ ] raw textをコピーする機能（<https://www.npmjs.com/package/copy-to-clipboard>等）(spec-20240110032806)
    ■サブ
      ・[ ] youtubeの検索結果(spec-20240110032815)
    ■デザイン
      ・[ ] 背景色とかをググった検索結果の色を参考に薄くグラデーションさせるなどする(spec-20240110032821)

  ＜コード進行当てチャレンジページ＞
    ・コード進行を聞いてそのコード進行を当てるゲーム
      ・レベルが複数あり、GODレベルはやばいほど複雑なコードが出る。
    ・OGPありでSNSに結果を投稿できる
    ・できるならCloudflare pagesとかに置いてもいい
  ＜aboutページ＞
    ・xxx
  ＜マイページ＞
    ■概説
      ・タイムライン（CRUD履歴など）
        ・鍵をかけられる
      ・自分が投稿したものを、指定区分で表示できる（日時別、アーティスト別）
        ・プライベートなものは鍵マークがつく
    ■捕捉
      ・投稿履歴は他の人には見せない。著作権法上問題無いとは言え、他人の楽譜を投稿しているのだから、見られたくない気がするので。
      ・ログ類も不要かも。お金かかるし。そもそもログ使わないはず
  ＜好きなコード進行を登録し、それと類似するコード進行が投稿されたら通知する機能の登録できる（RSS）＞
    ・いらないかなと思い…
  ＜ユーザー区分＞
    ■機能比較
      |                                                               | 未登録 | 一般 | 高機能 |
      | --- | --- | --- | --- |
      | コード進行の登録/更新/削除                                         | ○    | ○    | ○ |
      | コード進行の検索（非フルテーブルスキャンのやつ）                        | ◯    | ◯    | ○ |
      | 自分以外が投稿したコード進行の編集                                   | 0    | 無制限| 無制限 |
      | アカウント情報が必要になる機能（コメント機能、ユーザー設定、etc）のCRUD   | ✗    | ○    | ○ |
      | リクエストを出せるか                                               | ✗    | ○   | ○ |
      | コードの編集者名をプライベートにできる機能                             | ✗    | ○   | ○ |
      | コード進行の検索（フルテーブルスキャンのやつ）                          | ✗    | ✗   | ○ |
      | Web API                                                         | ✗    | ✗   | ○ |
      | 広告OFF機                                                        | ✗    | ✗   | ○ |
      | コードの公開範囲をプライベートorURLを知ってる人オンリーにできる機能        | ✗    | ✗   | ○ |
    ■捕捉
      ・高機能ユーザーは、通常毎月のサブスク課金（妥当なところで一旦100円程度で…）が必要
      ・プランのアップグレードが必要な機能は使えなくても見せておいて、`Upgrade`ボタンを用意して誘導する
  ＜ユーザー系機能＞
    ■概説
      ・アカウント管理機能（プロフィールや、自分やフォロイーのタイムラインや、他各種CRUD履歴など）
      ・各種投稿ごとに公開範囲の設定が可能
    ■機能
      ・フォロー
        ・フォロイーのコンテンツとか、自分のCRUD履歴とかのタイムラインが作られる
      ・バッジ（称号を与える。メルカリやスプラトゥーンのような）
      ・DM
      ・いいねしたコンテンツ一覧
      ・通報
      ・ブロック（ブロックしたユーザーのコンテンツは表示されない）
      ・各種設定機能
          ■サイト設定
            ・UI設定
              ・テーマカラー
              ・フォントサイズ
              ・表示言語
              ・タイムゾーン
            ・通知設定
              ・通知の受け取り設定
              ・サイトからのお知らせの受け取り設定
                ・好きなコード進行を登録したら、それと類似するコード進行が投稿されたら通知する
          ■プロフィール設定
            ・公開情報設定
              ・プロフィール画像
              ・ユーザー名
              ・プロフィール文
              ・SNSアカウント
          ■プラン設定
            ・プランの変更
          ■機能設定
            ・略
  ＜コード進行機能＞
    ■概説
    ・コード進行を入力して、それに対していろいろな情報を付与する機能
    ■機能
      ＜検索＞
        ・いろんな検索ができる
        ・コード進行を範囲選択して、その範囲と同じコード進行の曲を検索
        ・アーティストページに行けば、そのアーティストのコード進行一覧を見れたりもするようにする
      ＜閲覧＞
        ・コード進行の閲覧
          ・検索してその曲の詳細ページにアクセスしたら、その検索で引っかかった該当箇所をハイライト表示とかしたい
        ・（差別化としてハイクオリティな）コード進行の演奏(spec-20231225015517)
          ・tone.jsのSampling機能でやる感じかな…？鳴らす音を少しずらす等あれこれ工夫して生音に近づけたい。
          ・VSTとかくっつけられないのかな

      ＜登録/編集/削除＞
        ・専用UIでの登録orテキストでの登録を選べる
        ・差分をgitのように保存履歴で残せる（誰がどこをどういじったとかが履歴で残る）
        ・公開範囲の設定（スタンダード以上だとプライベートorURL知ってる人オンリーにできる）
      ＜付随機能＞
        ・共有
        ・曲情報
        ・いいね
        ・コメント（とそれに付随するいいね）
        ・タグ
        ・類似コード進行リスト
        ・関連アーティスト
      ＜アーティスト機能＞
        ・アーティストページにサマリー情報表示（更新があったアーティストに対して1日毎にバッチ更新）
          ・頻出コード進行（ディグリー表示）
          ・テンションコード利用率
          ・ディグリーの割合（T=30%、S=〜、D=~）
        ・登録されたコード進行の一覧
  ＜リスト機能＞
    ■概要
    ・ユーザーが独自に何個でも作れるタイトルとコメントつきキュレーション。
    ・対象はURL、アーティスト、コード進行、など
    ・URLの場合例えば、アーティストがコード進行について語ってるツイートのURLとかYouTubeのURLとか、本のURLとかをイメージしてる。
    ・または単純に「◯◯なコード進行の曲リスト」みたいなリストではその曲のYouTubeのURLとか
    ■機能
    リストのCRUD
    リストへのいいね
    リストへのコメント（とそれに付随するいいね）
  ＜有料プランのページで言い訳のため「サーバー代 クラウド 破綻」とかで検索したツイッターへのリンクを書いておく＞
    ・これはしたいところ
    ・「サーバー代が怖いから」っていうのが分かってもらえるはず
  ＜記事機能＞
    ■概要
    ・公式記事（コードaiみたいなアプリを紹介するとか）or、ユーザー投稿記事
    ■機能
    ・記事のCRUD
    ・記事へのコメント（とそれに付随するいいね）
    ・記事へのいいね
    ・記事へのお礼


