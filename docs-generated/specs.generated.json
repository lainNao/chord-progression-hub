[
  {
    "id": "20231221004524",
    "description": " ツイッターアカウント解説し、そこで更新情報をツイートする",
    "done": false
  },
  {
    "id": "20231221004639",
    "description": " 最初はベータ版という形で公開することで、温かい目で認知を広げてもらう",
    "done": false
  },
  {
    "id": "20231221004725",
    "description": " できたらいろんなところに投稿",
    "done": false
  },
  {
    "id": "20231221004831",
    "description": " いろんなジャンルのコード進行を登録しまくる。",
    "done": false
  },
  {
    "id": "20231221003801",
    "description": " すぐ治した方がいいわけでもない通知は、とりあえず後で見れば分かるところに通知する",
    "done": false
  },
  {
    "id": "20231221003747",
    "description": " すぐ治した方がいいクリティカルな通知は、すぐ気づく形で通知する",
    "done": false
  },
  {
    "id": "20231220134352",
    "description": " 一旦、仕様は`docs-spec`フォルダ配下にマークダウンで書いていく",
    "done": false
  },
  {
    "id": "20231220134421",
    "description": " 一つ一つの仕様は以下のように定義する",
    "done": true
  },
  {
    "id": "20231220135217",
    "description": " 仕様をパースして「自動テストの仕様網羅率」、「完了していない仕様」を閲覧するページやCIを用意したい",
    "done": false
  },
  {
    "id": "20231221012340",
    "description": " AST上足りないコード表現とかはユーザーからのリクエストを受けて増やすなどする",
    "done": false
  },
  {
    "id": "20231221012254",
    "description": " ログインは「Googleログイン」と「メールアドレス＋パスワード」の2種類を用意したい。",
    "done": false
  },
  {
    "id": "20231221012256",
    "description": " できればパスキーログインも",
    "done": false
  },
  {
    "id": "20231221010918",
    "description": "「これを満たせばOKですよ」という条件を明記させる。例えば「7thレベルまでは網羅」「イントロからアウトロまで省略しない」とか。",
    "done": false
  },
  {
    "id": "20231221010424",
    "description": " 対応ブラウザは「Chrome、Safari、Firefox、Edge」の「デスクトップ＆モバイル」の「最新バージョン＆一個前のバージョン」",
    "done": false
  },
  {
    "id": "20231221003217",
    "description": " OGP機能",
    "done": false
  },
  {
    "id": "20231221003158",
    "description": " HOME画面に追加（こういうやつ　<https://qiita.com/ryoko_yamazaki/items/f34d904d640fa6304fe0>）",
    "done": false
  },
  {
    "id": "20231221003320",
    "description": " .well-known周りの充実（security.txtとか）",
    "done": false
  },
  {
    "id": "20231221003900",
    "description": " もし広告用にクッキー使うなら、クッキー使いますよバナー",
    "done": false
  },
  {
    "id": "20231220222318",
    "description": " 見た目は音楽とかコード進行とかのメンタルモデルに合わせる",
    "done": false
  },
  {
    "id": "20231220222302",
    "description": " LottieやRive等でアニメーションを入れる（YouTubeの登録ボタンのエフェクトを参考にしたい）",
    "done": false
  },
  {
    "id": "20231220222306",
    "description": " ページ遷移時のアニメーションも必要なら混ぜる",
    "done": false
  },
  {
    "id": "20231220222316",
    "description": " 完全に「キーボードでしか操作できない人」「目の見えない人」でも操作できるようにしたい。ADA compliant?",
    "done": false
  },
  {
    "id": "20231221010009",
    "description": " `DBのエンティティ`フォルダにあるエンティティがテーブルのイメージで、それをを元にテーブルを作成",
    "done": false
  },
  {
    "id": "20231221010205",
    "description": " 10万件でのlike検索が1秒台で結果返ってきたので、もうとりあえずしばらくはlike検索でいいはず",
    "done": false
  },
  {
    "id": "20231221010207",
    "description": " 仮にlike検索ではどうともならなくなってきた時、コストかけてどうにか考える",
    "done": false
  },
  {
    "id": "20231221011017",
    "description": " エラーは収集する",
    "done": false
  },
  {
    "id": "20231221011038",
    "description": " 特に例えばchord-progression-ast-parser関連のエラーは、エラーとなった入力ももらってくる",
    "done": false
  },
  {
    "id": "20231221020049",
    "description": " カラーパレットはツールを使う",
    "done": false
  },
  {
    "id": "20231220223357",
    "description": " `コンポーネントライブラリ`　・・・chadcn/ui、tailwind",
    "done": false
  },
  {
    "id": "20231220223402",
    "description": " `フォーム`　・・・？（Tally？）",
    "done": false
  },
  {
    "id": "20231220223340",
    "description": " `APIクライアント`　・・・不要？またはtRPC等",
    "done": false
  },
  {
    "id": "20231221004035",
    "description": " `可変サイズ`　・・・htmlタグにfont-sizeを設定し、配下では絶対にrem指定をすることで対応。font-sizeだけど、これはrem全体に聞くはずなので、画像サイズとかにも有効にできるはず。ちなみにQaseはそんな感じで実装してるはず",
    "done": false
  },
  {
    "id": "20231221010458",
    "description": " browserslist等工夫して、古いCSS対応も自動化したい",
    "done": false
  },
  {
    "id": "20231221015337",
    "description": " `packages-dev/commonTestCaseRunners`を使い、汎用的なテストケースを網羅させる。仕様として管理するまでもないが地味に重要なやつを逃さないようにしたい。",
    "done": false
  },
  {
    "id": "20231220223404",
    "description": " `VRT`　・・・Chromatic（ただし料金的な意味で、導入はデグレを防ぎたくなってきた時期（完成が見えてから）でいい）",
    "done": false
  },
  {
    "id": "20231220223405",
    "description": " `E2E`　・・・Playwright",
    "done": false
  },
  {
    "id": "20231220223407",
    "description": " `テストランナー` ・・・jest、storybook",
    "done": false
  },
  {
    "id": "20231220223408",
    "description": " `リント`　・・・ESLint、Prettier、ls-lint、stylelint、etc",
    "done": false
  },
  {
    "id": "20231221004150",
    "description": " `~.◯◯.ts`などの〇〇の部分に入るやつはls-lintとかでリントかけよう。sつけ忘れや逆にsが多くなるとかで統制取れなくなるから",
    "done": false
  },
  {
    "id": "20231220223411",
    "description": " `Next.jsのルート可視化`　・・・NEXT.NAV",
    "done": false
  },
  {
    "id": "20231221004100",
    "description": " `バンドルサイズ監視`　・・・?",
    "done": false
  },
  {
    "id": "20231220223334",
    "description": " `サーバー`　・・・Remix",
    "done": false
  },
  {
    "id": "20231220223338",
    "description": " `ORM`　・・・Prisma、駄目ならDrizzle、駄目ならKysely",
    "done": false
  },
  {
    "id": "20231220223347",
    "description": " `課金`　・・・？",
    "done": false
  },
  {
    "id": "20231220223350",
    "description": " `ログイン`　・・・？（Clerk？next/auth？）",
    "done": false
  },
  {
    "id": "20231220223352",
    "description": " `メール送信`　・・・AWS SES",
    "done": false
  },
  {
    "id": "20231220223354",
    "description": " `メール本文作成`　・・・react email（emailのhtmlをreactコンポーネントで作れるやつ）",
    "done": false
  },
  {
    "id": "20231220223359",
    "description": " `i18n`　・・・？",
    "done": false
  },
  {
    "id": "20231220223430",
    "description": " `DDoS対策`　・・・?",
    "done": false
  },
  {
    "id": "20231221014424",
    "description": " GCPの環境は新規でプロジェクト用のメールアドレスを作成し、それから構築する",
    "done": false
  },
  {
    "id": "20231220223912",
    "description": " `ブルーグリーンデプロイとかの安全なデプロイをどうやるか`",
    "done": false
  },
  {
    "id": "20231220223235",
    "description": " `Git`　・・・GitHub",
    "done": false
  },
  {
    "id": "20231220223236",
    "description": " `CI`　・・・GitHub Actions、Lefthook",
    "done": false
  },
  {
    "id": "20231220223238",
    "description": " `CD`　・・・GitHub Actions、etc",
    "done": false
  },
  {
    "id": "20231220223239",
    "description": " `IaC`　・・・Terraform",
    "done": false
  },
  {
    "id": "20231220223240",
    "description": " `CDN`　・・・Cloudflare",
    "done": false
  },
  {
    "id": "20231220223242",
    "description": " `ドメイン取得`　・・・？",
    "done": false
  },
  {
    "id": "20231220223243",
    "description": " `DNS`　・・・Cloudflare",
    "done": false
  },
  {
    "id": "20231220223244",
    "description": " `ロードバランサー`　・・・?",
    "done": false
  },
  {
    "id": "20231220223245",
    "description": " `ホスティング`　・・・Cloudflare workers",
    "done": false
  },
  {
    "id": "20231220223250",
    "description": " `メール`　・・・？",
    "done": false
  },
  {
    "id": "20231220223252",
    "description": " `ログ`　・・・？",
    "done": false
  },
  {
    "id": "20231220223253",
    "description": " `モニタリング`　・・・？",
    "done": false
  },
  {
    "id": "20231220223255",
    "description": " `バックアップ`　・・・？",
    "done": false
  },
  {
    "id": "20231220223256",
    "description": " `メッセージング`　・・・？",
    "done": false
  },
  {
    "id": "20231220223300",
    "description": " `バッチ・ジョブ`　・・・？",
    "done": false
  },
  {
    "id": "20231220223304",
    "description": " `アクセス解析`　・・・Google Analytics？",
    "done": false
  },
  {
    "id": "20231220223306",
    "description": " `環境分離（本番、ステージング、開発）`　・・・Gitのブランチでdevelop、staging、productionを分ける（mainは不要）。stagingにプッシュされたらステージング環境にデプロイし、productionにプッシュされたら本番環境にデプロイする。でいいかな？",
    "done": false
  },
  {
    "id": "20231220223309",
    "description": " `DB`　・・・PlanetScale",
    "done": false
  },
  {
    "id": "20231220223328",
    "description": " `DB管理`　・・・bytebase？",
    "done": false
  },
  {
    "id": "20231220223330",
    "description": " `ストレージ`　・・・Cloudflare R2",
    "done": false
  },
  {
    "id": "20231220223331",
    "description": " `セッション`　・・・Cloudflare KV? Upstash？",
    "done": false
  },
  {
    "id": "20231220223332",
    "description": " `フォント`　・・・Cloudflare Fonts",
    "done": false
  }
]